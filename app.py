# app.py ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥—É–±–ª–µ–π
# –¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª—é—á–∞ –∫ email –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≥–æ–ª—É–±—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from io import BytesIO
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import requests  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP

st.set_page_config(page_title="üè° AI Real Estate Predictor", layout="centered")

# --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
lang = st.sidebar.selectbox("üåê Language / –Ø–∑—ã–∫", ["English", "–†—É—Å—Å–∫–∏–π"])

T = {
    "English": {
        "auth_title": "üîë Authorization",
        "auth_prompt": "Enter your access key:",
        "auth_error": "‚õî Invalid key",
        "auth_expired": "‚õî Key expired",
        "auth_success": "‚úÖ Access granted",
        "admin_success": "‚úÖ Admin access granted",
        "title": "üè° AI Real Estate Price Predictor",
        "upload": "Upload CSV (columns: city, sqft, rooms, bathrooms, price)",
        "data_preview": "### Data preview",
        "plot": "### Price vs. Square Footage",
        "xlabel": "Square Footage (sqft)",
        "ylabel": "Price (‚Ç¨)",
        "prediction_input": "Enter square footage:",
        "prediction_result": "Predicted price: {price:,} ‚Ç¨",
        "download": "üì• Download predictions as Excel",
        "csv_error": "CSV must contain columns: city, sqft, rooms, bathrooms, price",
        "admin_title": "üëë Admin: Manage Users",
        "current_keys": "üìã Current Keys",
        "add_key": "‚ûï Add New Key",
        "delete_key": "üóë Delete Key",
        "expiry_optional": "Expiry date (optional)",
        "delete_prompt": "Enter key to delete",
        "extend_key": "‚è≥ Extend Key",
        "extend_prompt": "Enter key to extend",
        "extend_date": "New expiry date",
        "email_prompt": "Enter your email:",
        "logs": "üìú Login Logs",
        "download_logs": "üì• Download Logs as Excel",
        "filter_email": "üîç Filter logs by email"
    },
    "–†—É—Å—Å–∫–∏–π": {
        "auth_title": "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        "auth_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:",
        "auth_error": "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á",
        "auth_expired": "‚õî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫",
        "auth_success": "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω",
        "admin_success": "‚úÖ –î–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "title": "üè° AI-–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        "upload": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (–∫–æ–ª–æ–Ω–∫–∏: city, sqft, rooms, bathrooms, price)",
        "data_preview": "### –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö",
        "plot": "### –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø–ª–æ—â–∞–¥–∏",
        "xlabel": "–ü–ª–æ—â–∞–¥—å (–∫–≤. —Ñ—É—Ç—ã)",
        "ylabel": "–¶–µ–Ω–∞ (‚Ç¨)",
        "prediction_input": "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å:",
        "prediction_result": "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã: {price:,} ‚Ç¨",
        "download": "üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ Excel",
        "csv_error": "CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: city, sqft, rooms, bathrooms, price",
        "admin_title": "üëë –ê–¥–º–∏–Ω: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        "current_keys": "üìã –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–∏",
        "add_key": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á",
        "delete_key": "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á",
        "expiry_optional": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        "delete_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        "extend_key": "‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á",
        "extend_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è",
        "extend_date": "–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
        "email_prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        "logs": "üìú –õ–æ–≥–∏ –≤—Ö–æ–¥–æ–≤",
        "download_logs": "üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ –≤ Excel",
        "filter_email": "üîç –§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤ –ø–æ email"
    }
}

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ---
creds_dict = dict(st.secrets["GCP_CREDENTIALS"])
creds = Credentials.from_service_account_info(
    creds_dict,
    scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
)
client = gspread.authorize(creds)
SHEET_ID = st.secrets["SHEET_ID"]
sheet = client.open_by_key(SHEET_ID).sheet1

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_ip():
    try:
        return requests.get("https://api.ipify.org").text
    except:
        return "unknown"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π ---
def load_keys():
    records = sheet.get_all_records()
    df = pd.DataFrame(records)
    if "expiry_date" in df.columns:
        df["expiry_date"] = pd.to_datetime(df["expiry_date"], errors="coerce")
    return df

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ ---
def add_key(new_key, expiry_date=""):
    sheet.append_row([new_key, expiry_date, ""])
    st.success(f"‚úÖ Key {new_key} added!")

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ ---
def delete_key(del_key):
    records = sheet.get_all_records()
    for idx, row in enumerate(records, start=2):
        if row["key"] == del_key:
            sheet.delete_rows(idx)
            st.success(f"‚úÖ Key {del_key} deleted!")
            return
    st.error("‚ö†Ô∏è Key not found")

# --- –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ ---
def extend_key(ext_key, new_expiry):
    records = sheet.get_all_records()
    for idx, row in enumerate(records, start=2):
        if row["key"] == ext_key:
            sheet.update_cell(idx, 2, str(new_expiry))
            st.success(f"‚úÖ Key {ext_key} extended until {new_expiry}")
            return
    st.error("‚ö†Ô∏è Key not found")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–æ–≤ ---
def log_access(user_key, email, role):
    try:
        log_sheet = client.open_by_key(SHEET_ID).worksheet("logs")
    except:
        sh = client.open_by_key(SHEET_ID)
        sh.add_worksheet(title="logs", rows="1000", cols="5")
        log_sheet = sh.worksheet("logs")
        log_sheet.append_row(["timestamp", "key", "email", "role", "ip"])

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ip = get_user_ip()
    log_sheet.append_row([timestamp, user_key, email, role, ip])

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ ---
def check_key_valid(user_key, email=""):
    if user_key == st.secrets["ADMIN_KEY"]:
        return True, "admin", T[lang]["admin_success"]

    df = load_keys()
    row = df[df["key"] == user_key]

    if row.empty:
        return False, "user", T[lang]["auth_error"]

    expiry = row["expiry_date"].values[0]
    user_val = row["user"].values[0] if "user" in df.columns else ""

    if not pd.isna(expiry) and expiry < pd.Timestamp(datetime.now()):
        return False, "user", T[lang]["auth_expired"]

    if user_val:
        if email and email != user_val:
            return False, "user", f"‚ö†Ô∏è –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {user_val}"
        else:
            return True, "user", T[lang]["auth_success"]
    else:
        if email:
            records = sheet.get_all_records()
            for idx, r in enumerate(records, start=2):
                if r["key"] == user_key:
                    sheet.update_cell(idx, 3, email)
                    # üëá –ì–æ–ª—É–±–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –¥—É–±–ª—è
                    st.info(f"üîó –ö–ª—é—á {user_key} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {email}")
                    break
        return True, "user", T[lang]["auth_success"]

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
st.sidebar.title(T[lang]["auth_title"])
password = st.sidebar.text_input(T[lang]["auth_prompt"], type="password")
email = st.sidebar.text_input(T[lang]["email_prompt"])

valid, role, message = check_key_valid(password.strip(), email.strip())

if not valid:
    st.error(message)
    st.stop()
else:
    st.success(message)  # ‚úÖ –û–¥–Ω–æ –∑–µ–ª—ë–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_access(password.strip(), email.strip(), role)

# --- –ê–¥–º–∏–Ω–∫–∞ ---
if role == "admin":
    st.title(T[lang]["admin_title"])
    st.subheader(T[lang]["current_keys"])
    keys_df = load_keys()
    st.dataframe(keys_df)

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
if role in ["user", "admin"]:
    st.title(T[lang]["title"])
    uploaded_file = st.file_uploader(T[lang]["upload"], type=["csv"])
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write(T[lang]["data_preview"])
        st.dataframe(df.head())

        if {"city", "sqft", "rooms", "bathrooms", "price"}.issubset(df.columns):
            X = df[["sqft", "rooms", "bathrooms"]]
            y = df["price"]

            model = LinearRegression()
            model.fit(X, y)

            st.write(T[lang]["plot"])
            fig, ax = plt.subplots()
            for city in df["city"].unique():
                city_data = df[df["city"] == city]
                ax.scatter(city_data["sqft"], city_data["price"], label=city)

            ax.set_xlabel(T[lang]["xlabel"])
            ax.set_ylabel(T[lang]["ylabel"])
            ax.legend()
            st.pyplot(fig)

            sqft_value = st.number_input(T[lang]["prediction_input"], min_value=200, max_value=5000, step=50)
            if sqft_value:
                price_pred = model.predict([[sqft_value, 3, 2]])[0]
                st.success(T[lang]["prediction_result"].format(price=int(price_pred)))

            df["predicted_price"] = model.predict(X).astype(int)
            output = BytesIO()
            df.to_excel(output, index=False, engine="openpyxl")
            st.download_button(
                label=T[lang]["download"],
                data=output.getvalue(),
                file_name="real_estate_predictions.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.error(T[lang]["csv_error"])
