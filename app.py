# app.py ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime
import requests

# ML / preprocessing
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
try:
    from xgboost import XGBRegressor
    XGBOOST_AVAILABLE = True
except Exception:
    XGBOOST_AVAILABLE = False  # –µ—Å–ª–∏ xgboost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏—é
from sklearn.metrics import r2_score, mean_absolute_error
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Google Sheets
import gspread
from google.oauth2.service_account import Credentials

# ----------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã -----------------
st.set_page_config(page_title="üè° AI Real Estate SaaS", layout="centered")

# ----------------- –¢–µ–∫—Å—Ç—ã –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö -----------------
lang = st.sidebar.selectbox("üåê Language / –Ø–∑—ã–∫", ["English", "–†—É—Å—Å–∫–∏–π"])

T = {
    "English": {
        "auth_title": "üîë Authorization",
        "auth_prompt": "Enter your access key:",
        "email_prompt": "Enter your email:",
        "auth_error": "‚õî Invalid key",
        "auth_expired": "‚õî Key expired",
        "auth_success": "‚úÖ Access granted",
        "admin_success": "‚úÖ Admin access granted",
        "title": "üè° AI Real Estate Price Predictor",
        "upload": "Upload CSV (columns: city, sqft, rooms, bathrooms, price)",
        "data_preview": "### Data preview",
        "plot": "üìà Actual vs Predicted Prices",
        "prediction_input": "Enter square footage:",
        "prediction_result": "Predicted price: {price:,} ‚Ç¨",
        "download": "üì• Download predictions as Excel",
        "csv_error": "CSV must contain columns: city, sqft, rooms, bathrooms, price",
        "admin_title": "üëë Admin: Manage Users",
        "current_keys": "üìã Current Keys",
        "add_key": "‚ûï Add New Key",
        "delete_key": "üóë Delete Key",
        "expiry_optional": "Expiry date (optional)",
        "delete_prompt": "Enter key to delete",
        "extend_key": "‚è≥ Extend Key",
        "extend_prompt": "Enter key to extend",
        "extend_date": "New expiry date",
        "logs": "üìú Login Logs",
        "download_logs": "üì• Download Logs as Excel",
        "filter_email": "üîç Filter logs by email",
        "plan_basic_info": "üîë Your plan: Basic ‚Äî Linear Regression only.",
        "xgboost_missing": "XGBoost not installed ‚Äî option disabled."
    },
    "–†—É—Å—Å–∫–∏–π": {
        "auth_title": "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        "auth_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:",
        "email_prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        "auth_error": "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á",
        "auth_expired": "‚õî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫",
        "auth_success": "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω",
        "admin_success": "‚úÖ –î–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "title": "üè° AI-–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        "upload": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (–∫–æ–ª–æ–Ω–∫–∏: city, sqft, rooms, bathrooms, price)",
        "data_preview": "### –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö",
        "plot": "üìà –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è vs –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞",
        "prediction_input": "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å:",
        "prediction_result": "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã: {price:,} ‚Ç¨",
        "download": "üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ Excel",
        "csv_error": "CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: city, sqft, rooms, bathrooms, price",
        "admin_title": "üëë –ê–¥–º–∏–Ω: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        "current_keys": "üìã –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–∏",
        "add_key": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á",
        "delete_key": "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á",
        "expiry_optional": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        "delete_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        "extend_key": "‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á",
        "extend_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è",
        "extend_date": "–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
        "logs": "üìú –õ–æ–≥–∏ –≤—Ö–æ–¥–æ–≤",
        "download_logs": "üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ –≤ Excel",
        "filter_email": "üîç –§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤ –ø–æ email",
        "plan_basic_info": "üîë –í–∞—à —Ç–∞—Ä–∏—Ñ: Basic ‚Äî —Ç–æ–ª—å–∫–æ Linear Regression.",
        "xgboost_missing": "XGBoost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –æ–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    }
}
# –£–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–∞–º
TXT = T[lang]

# ----------------- Google Sheets: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç—ã Streamlit -----------------
# –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ Streamlit Secrets –∑–∞–¥–∞–Ω—ã:
# - SHEET_ID (id —Ç–∞–±–ª–∏—Ü—ã)
# - ADMIN_KEY (—Å—Ç—Ä–æ–∫–∞)
# - GCP_CREDENTIALS (json —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
# –ù–ï –í–ö–õ–ê–î–´–í–ê–ô –°–Æ–î–ê –°–ï–ö–†–ï–¢–´ –í –Ø–í–ù–û–ú –í–ò–î–ï.
try:
    creds_dict = dict(st.secrets["GCP_CREDENTIALS"])
    creds = Credentials.from_service_account_info(
        creds_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    )
    client = gspread.authorize(creds)
    SHEET_ID = st.secrets["SHEET_ID"]
    sheet = client.open_by_key(SHEET_ID).sheet1  # –ª–∏—Å—Ç access_keys (–æ–∂–∏–¥–∞–µ—Ç—Å—è)
except Exception as e:
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞) ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Sheets,
    # –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–∞–¥–º–∏–Ω–∫–∏).
    sheet = None
    client = None
    st.warning("‚ö†Ô∏è Google Sheets not configured (check Streamlit secrets). Admin / keys will be disabled in this session.")
    # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å e –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ü–µ–ª—è—Ö:
    # st.write(e)

# ----------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -----------------

def get_user_ip():
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å.
    –í–Ω–∏–º–∞–Ω–∏–µ: –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö (Streamlit Cloud) –∑–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IP —Å–µ—Ä–≤–µ—Ä–∞,
    –Ω–æ —á–∞—â–µ –≤—Å–µ–≥–æ —ç—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≥—Ä—É–±–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏/–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    """
    try:
        return requests.get("https://api.ipify.org").text
    except:
        return "unknown"

def load_keys():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É access_keys –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ Google Sheets.
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
    key | expiry_date | user
    """
    if sheet is None:
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É –ª–æ–∫–∞–ª—å–Ω–æ
        return pd.DataFrame(columns=["key", "expiry_date", "user"])
    records = sheet.get_all_records()
    df = pd.DataFrame(records)
    if "expiry_date" in df.columns:
        df["expiry_date"] = pd.to_datetime(df["expiry_date"], errors="coerce")
    else:
        df["expiry_date"] = pd.NaT
    if "user" not in df.columns:
        df["user"] = ""
    return df

def add_key(new_key, expiry_date=""):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã (key, expiry_date, user='')."""
    if sheet is None:
        st.error("Google Sheets not configured.")
        return
    sheet.append_row([new_key, expiry_date, ""])
    st.success(f"‚úÖ Key {new_key} added!")

def delete_key(del_key):
    """–£–¥–∞–ª—è–µ—Ç –∫–ª—é—á –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (–∏—â–µ—Ç –≤ –∫–æ–ª–æ–Ω–∫–µ key)."""
    if sheet is None:
        st.error("Google Sheets not configured.")
        return
    records = sheet.get_all_records()
    for idx, row in enumerate(records, start=2):  # —Å—Ç—Ä–æ–∫–∞ 1 ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if row.get("key") == del_key:
            sheet.delete_rows(idx)
            st.success(f"‚úÖ Key {del_key} deleted!")
            return
    st.error("‚ö†Ô∏è Key not found")

def extend_key(ext_key, new_expiry):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç expiry_date –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞."""
    if sheet is None:
        st.error("Google Sheets not configured.")
        return
    records = sheet.get_all_records()
    for idx, row in enumerate(records, start=2):
        if row.get("key") == ext_key:
            sheet.update_cell(idx, 2, str(new_expiry))
            st.success(f"‚úÖ Key {ext_key} extended until {new_expiry}")
            return
    st.error("‚ö†Ô∏è Key not found")

def bind_user_to_key(user_key, email):
    """–ï—Å–ª–∏ –∫–ª—é—á –µ—â—ë –Ω–µ –∑–∞–Ω—è—Ç, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–æ–Ω–∫—É user."""
    if sheet is None:
        return
    records = sheet.get_all_records()
    for idx, row in enumerate(records, start=2):
        if row.get("key") == user_key:
            current_user = row.get("user", "")
            if not current_user:
                sheet.update_cell(idx, 3, email)
            return

def log_access(user_key, email, role, plan="Basic"):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ –≤ –ª–∏—Å—Ç "logs": timestamp, key, email, role, plan, ip
    """
    if client is None:
        return
    sh = client.open_by_key(SHEET_ID)
    try:
        log_sheet = sh.worksheet("logs")
    except gspread.exceptions.WorksheetNotFound:
        sh.add_worksheet(title="logs", rows="1000", cols="6")
        log_sheet = sh.worksheet("logs")
        log_sheet.append_row(["timestamp", "key", "email", "role", "plan", "ip"])

    # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ip = get_user_ip()
    log_sheet.append_row([timestamp, user_key, email, role, plan, ip])


    # –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (30 –¥–Ω–µ–π)
    try:
        logs = log_sheet.get_all_records()
        cutoff = pd.Timestamp(datetime.now()) - pd.Timedelta(days=30)
        rows_to_keep = [0]  # –∏–Ω–¥–µ–∫—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        all_values = log_sheet.get_all_values()
        for idx, row in enumerate(logs, start=2):
            try:
                ts = pd.to_datetime(row.get("timestamp"))
                if ts >= cutoff:
                    rows_to_keep.append(idx)
            except:
                rows_to_keep.append(idx)
        # –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —É–¥–∞–ª–∏—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç
        if len(rows_to_keep) - 1 < len(logs):
            header = all_values[0]
            new_data = [header] + [all_values[i-1] for i in rows_to_keep[1:]]
            log_sheet.clear()
            log_sheet.update(new_data)
    except Exception:
        # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        pass

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ip = get_user_ip()
    log_sheet.append_row([timestamp, user_key, email, role, ip])

def check_key_valid(user_key, email=""):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞:
    - –µ—Å–ª–∏ key == ADMIN_KEY –∏–∑ secrets => role admin
    - –∏–Ω–∞—á–µ –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ access_keys
      * –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–µ–≤–µ—Ä–Ω—ã–π
      * –µ—Å–ª–∏ –µ—Å—Ç—å expiry_date –∏ –æ–Ω –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –∏—Å—Ç—ë–∫
      * –µ—Å–ª–∏ –µ—Å—Ç—å user –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å email (—á—Ç–æ–±—ã –∫–ª—é—á –Ω–µ "—É–≥–Ω–∞–ª–∏")
      * –∏–Ω–∞—á–µ ‚Äî –≤–∞–ª–∏–¥–µ–Ω; –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º email –∫ –∫–ª—é—á—É
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (valid: bool, role: "admin"|"user", message: str)
    """
    ADMIN_KEY = st.secrets.get("ADMIN_KEY") if "ADMIN_KEY" in st.secrets else None
    if ADMIN_KEY and user_key == ADMIN_KEY:
        return True, "admin", TXT["admin_success"]

    df = load_keys()
    if df.empty:
        return False, "user", TXT["auth_error"]

    row = df[df["key"] == user_key]
    if row.empty:
        return False, "user", TXT["auth_error"]

    expiry = row["expiry_date"].values[0]
    user_val = row["user"].values[0] if "user" in row.columns else ""

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if pd.notna(expiry) and expiry < pd.Timestamp(datetime.now()):
        return False, "user", TXT["auth_expired"]

    # –µ—Å–ª–∏ –∫–ª—é—á —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É email ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
    if user_val and email and (email.lower() != str(user_val).lower()):
        return False, "user", f"‚ö†Ô∏è This key is already used by {user_val}"

    # –µ—Å–ª–∏ –∫–ª—é—á —Å–≤–æ–±–æ–¥–µ–Ω –∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ email ‚Äî –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º
    if (not user_val) and email:
        bind_user_to_key(user_key, email)

    return True, "user", TXT["auth_success"]

# ----------------- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è -----------------
st.sidebar.title(TXT["auth_title"])
password = st.sidebar.text_input(TXT["auth_prompt"], type="password")
email = st.sidebar.text_input(TXT["email_prompt"])

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á/–∞–∫–∫–∞—É–Ω—Ç
valid, role, message = check_key_valid(password.strip(), email.strip())

if not valid:
    st.error(message)
    st.stop()
else:
    st.success(message)
    # –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Google Sheets)
    valid, role, message = check_key_valid(password, email)

if not valid:
    st.error(message)
    st.stop()
else:
    st.success(message)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ
    plan = "Basic"
    if role == "admin":
        plan = "Admin"
    else:
        if email and ("pro" in email.lower() or "pro" in password.lower()):
            plan = "Pro"

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥
    log_access(password.strip(), email.strip(), role, plan)


# ----------------- Admin Panel (–≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É) -----------------
if role == "admin":
    st.title(TXT["admin_title"])

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–∏
    st.subheader(TXT["current_keys"])
    keys_df = load_keys()
    st.dataframe(keys_df)

    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
    st.subheader(TXT["add_key"])
    new_key = st.text_input("Enter new key")
    expiry_date = st.date_input(TXT["expiry_optional"], value=None)
    if st.button("Add Key"):
        if new_key.strip() == "":
            st.error("‚ö†Ô∏è Key cannot be empty")
        else:
            add_key(new_key.strip(), str(expiry_date) if expiry_date else "")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    st.subheader(TXT["delete_key"])
    del_key = st.text_input(TXT["delete_prompt"])
    if st.button("Delete Key"):
        if del_key.strip() == "":
            st.error("‚ö†Ô∏è Please enter a key")
        else:
            delete_key(del_key.strip())

    # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    st.subheader(TXT["extend_key"])
    ext_key = st.text_input(TXT["extend_prompt"])
    new_expiry = st.date_input(TXT["extend_date"], value=datetime.now())
    if st.button("Extend Key"):
        if ext_key.strip() == "":
            st.error("‚ö†Ô∏è Please enter a key")
        else:
            extend_key(ext_key.strip(), new_expiry)

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ + —Ñ–∏–ª—å—Ç—Ä + —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    st.subheader(TXT["logs"])
    try:
        logs = client.open_by_key(SHEET_ID).worksheet("logs").get_all_records()
        logs_df = pd.DataFrame(logs)
        email_filter = st.text_input(TXT["filter_email"])
        if email_filter:
            filtered_logs = logs_df[logs_df["email"].str.contains(email_filter, case=False, na=False)]
            st.dataframe(filtered_logs)
        else:
            st.dataframe(logs_df)

        # –∫–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤
        output = BytesIO()
        logs_df.to_excel(output, index=False, engine="openpyxl")
        st.download_button(
            label=TXT["download_logs"],
            data=output.getvalue(),
            file_name="login_logs.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    except Exception:
        st.info("‚ÑπÔ∏è No logs yet or Google Sheets not configured.")

# ----------------- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ ML -----------------
if role in ["user", "admin"]:
    st.title(TXT["title"])
    uploaded_file = st.file_uploader(TXT["upload"], type=["csv"])

    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.subheader(TXT["data_preview"])
        st.dataframe(df.head())

        required_cols = {"city", "sqft", "rooms", "bathrooms", "price"}
        if not required_cols.issubset(df.columns):
            st.error(TXT["csv_error"])
        else:
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∞: Basic vs Pro
            # –ü—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ –≤ –∫–ª—é—á–µ –∏–ª–∏ –≤ email –µ—Å—Ç—å 'pro' (–ø—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞),
            # —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Pro; –∏–Ω–∞—á–µ ‚Äî Basic.
            is_pro = False
            if role == "admin":
                is_pro = True
            else:
                # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–µ—Å–ª–∏ email –ø—É—Å—Ç ‚Äî Basic)
                if email and ("pro" in email.lower() or "pro" in password.lower()):
                    is_pro = True

            # –µ—Å–ª–∏ xgboost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ü–∏—é
            model_options = ["Linear Regression", "RandomForest"]
            if XGBOOST_AVAILABLE:
                model_options.append("XGBoost")
            else:
                # —Å–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ xgboost –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                st.info(TXT["xgboost_missing"])

            # –µ—Å–ª–∏ Basic ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –ª–∏–Ω–µ–π–Ω–æ–π –º–æ–¥–µ–ª—å—é
            if not is_pro:
                st.info(TXT["plan_basic_info"])
                model_choice = "Linear Regression"
            else:
                model_choice = st.selectbox("Choose ML Model", model_options)

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            X = df[["city", "sqft", "rooms", "bathrooms"]]
            y = df["price"]

            preprocessor = ColumnTransformer(
                transformers=[
                    ("city", OneHotEncoder(handle_unknown="ignore"), ["city"]),
                    ("num", "passthrough", ["sqft", "rooms", "bathrooms"])
                ]
            )

            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            if model_choice == "Linear Regression":
                model = LinearRegression()
            elif model_choice == "RandomForest":
                model = RandomForestRegressor(n_estimators=100, random_state=42)
            else:
                model = XGBRegressor(n_estimators=100, random_state=42)

            # –°–±–æ—Ä–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
            pipeline = Pipeline(steps=[("preprocessor", preprocessor), ("model", model)])
            with st.spinner("üîß Training model..."):
                pipeline.fit(X, y)
            preds = pipeline.predict(X)

            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
            r2 = r2_score(y, preds)
            mae = mean_absolute_error(y, preds)
            st.write(f"**R¬≤ Score:** {r2:.3f}")
            st.write(f"**MAE:** {mae:.2f} ‚Ç¨")

            # –ì—Ä–∞—Ñ–∏–∫: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ
            st.subheader(TXT["plot"])
            fig, ax = plt.subplots()
            ax.scatter(y, preds, alpha=0.7, label="Predictions")
            ax.plot([y.min(), y.max()], [y.min(), y.max()], "r--", label="Perfect Fit")
            ax.set_xlabel("Actual Price (‚Ç¨)")
            ax.set_ylabel("Predicted Price (‚Ç¨)")
            ax.legend()
            st.pyplot(fig)

            # –§–æ—Ä–º–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –Ω–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ
            st.subheader("üîÆ Predict New Property")
            city_input = st.text_input("City", "Madrid")
            sqft_input = st.number_input(TXT["prediction_input"], min_value=20, max_value=2000, value=70, step=5)
            rooms_input = st.number_input("Rooms", min_value=1, max_value=10, value=2, step=1)
            bathrooms_input = st.number_input("Bathrooms", min_value=1, max_value=5, value=1, step=1)

            if st.button("Predict Price"):
                new_data = pd.DataFrame([[city_input, sqft_input, rooms_input, bathrooms_input]],
                                        columns=["city", "sqft", "rooms", "bathrooms"])
                price_pred = pipeline.predict(new_data)[0]
                st.success(TXT["prediction_result"].format(price=int(price_pred)))

            # –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ CSV
            st.subheader(TXT["download"])
            df["predicted_price"] = preds.astype(int)
            output = BytesIO()
            df.to_excel(output, index=False, engine="openpyxl")
            st.download_button(
                label=TXT["download"],
                data=output.getvalue(),
                file_name="real_estate_predictions.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

