# app.py ‚Äî –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ø–ª–∞–Ω—ã, –∞–¥–º–∏–Ω–∫–∞, –ª–æ–≥–∏, –º–æ–¥–µ–ª–∏, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏ —ç–∫—Å–ø–æ—Ä—Ç
# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ ‚Äî —á–∏—Ç–∞–π –∏ —É—á–∏—Å—å :)

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime, timedelta
import requests

# ML
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_absolute_error

# XGBoost –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
try:
    import xgboost as xgb
    XGBOOST_AVAILABLE = True
except Exception:
    XGBOOST_AVAILABLE = False

# Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –Ω–∏—Ö)
try:
    import gspread
    from google.oauth2.service_account import Credentials
    GSPREAD_AVAILABLE = True
except Exception:
    GSPREAD_AVAILABLE = False

st.set_page_config(page_title="üè° AI Real Estate SaaS", layout="centered")

# ----------------- –¢–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ -----------------
lang = st.sidebar.selectbox("üåê Language / –Ø–∑—ã–∫", ["English", "–†—É—Å—Å–∫–∏–π"])

T = {
    "English": {
        "auth_title": "üîë Authorization",
        "auth_prompt": "Enter your access key:",
        "email_prompt": "Enter your email:",
        "auth_error": "‚õî Invalid key",
        "auth_expired": "‚õî Key expired",
        "auth_trial_expired": "‚õî Trial expired (7 days limit)",
        "auth_success": "‚úÖ Access granted (Plan: {plan})",
        "admin_success": "‚úÖ Admin access granted",
        "title": "üè° AI Real Estate Price Predictor",
        "upload": "Upload CSV (columns: city, sqft, rooms, bathrooms, price)",
        "data_preview": "### Data preview",
        "plot": "### Price vs. Square Footage",
        "xlabel": "Square Footage (sqft)",
        "ylabel": "Price (‚Ç¨)",
        "prediction_input": "Enter square footage:",
        "prediction_result": "Predicted price: {price:,} ‚Ç¨",
        "download": "üì• Download predictions as Excel",
        "download_png": "üì• Download plot as PNG",
        "csv_error": "CSV must contain columns: city, sqft, rooms, bathrooms, price",
        "admin_title": "üëë Admin: Manage Users / Keys",
        "current_keys": "üìã Current Keys (key | expiry_date | user | plan)",
        "add_key": "‚ûï Add New Key",
        "delete_key": "üóë Delete Key",
        "expiry_optional": "Expiry date (optional)",
        "delete_prompt": "Enter key to delete",
        "extend_key": "‚è≥ Extend Key",
        "extend_prompt": "Enter key to extend",
        "extend_date": "New expiry date",
        "change_plan": "üîÅ Change plan for key",
        "unbind_user": "üîì Unbind user (clear email)",
        "logs": "üìú Login Logs",
        "download_logs": "üì• Download Logs as Excel",
        "filter_email": "üîç Filter logs by email"
    },
    "–†—É—Å—Å–∫–∏–π": {
        "auth_title": "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        "auth_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:",
        "email_prompt": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        "auth_error": "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á",
        "auth_expired": "‚õî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫",
        "auth_trial_expired": "‚õî Trial –∏—Å—Ç—ë–∫ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π)",
        "auth_success": "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω (–¢–∞—Ä–∏—Ñ: {plan})",
        "admin_success": "‚úÖ –î–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "title": "üè° AI-–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        "upload": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (–∫–æ–ª–æ–Ω–∫–∏: city, sqft, rooms, bathrooms, price)",
        "data_preview": "### –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö",
        "plot": "### –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø–ª–æ—â–∞–¥–∏",
        "xlabel": "–ü–ª–æ—â–∞–¥—å (sqft)",
        "ylabel": "–¶–µ–Ω–∞ (‚Ç¨)",
        "prediction_input": "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å:",
        "prediction_result": "–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã: {price:,} ‚Ç¨",
        "download": "üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ Excel",
        "download_png": "üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤ PNG",
        "csv_error": "CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: city, sqft, rooms, bathrooms, price",
        "admin_title": "üëë –ê–¥–º–∏–Ω: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ / –∫–ª—é—á–∞–º–∏",
        "current_keys": "üìã –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–∏ (key | expiry_date | user | plan)",
        "add_key": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á",
        "delete_key": "üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á",
        "expiry_optional": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        "delete_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        "extend_key": "‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á",
        "extend_prompt": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è",
        "extend_date": "–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
        "change_plan": "üîÅ –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ —É –∫–ª—é—á–∞",
        "unbind_user": "üîì –û—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—á–∏—Å—Ç–∏—Ç—å email)",
        "logs": "üìú –õ–æ–≥–∏ –≤—Ö–æ–¥–æ–≤",
        "download_logs": "üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ –≤ Excel",
        "filter_email": "üîç –§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤ –ø–æ email"
    }
}
TXT = T[lang]

# ----------------- Google Sheets: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ -----------------
client = None
sheet = None
SHEET_ID = None
if GSPREAD_AVAILABLE:
    try:
        # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ Streamlit secrets –µ—Å—Ç—å GCP_CREDENTIALS –∏ SHEET_ID
        creds_dict = dict(st.secrets["GCP_CREDENTIALS"])
        creds = Credentials.from_service_account_info(
            creds_dict,
            scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        )
        client = gspread.authorize(creds)
        SHEET_ID = st.secrets.get("SHEET_ID", None)
        if SHEET_ID:
            sheet = client.open_by_key(SHEET_ID).sheet1
    except Exception as e:
        # –Ω–µ –ª–æ–º–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        st.warning("‚ö†Ô∏è Google Sheets not configured or credentials invalid ‚Äî admin/keys/logs disabled in this session.")
        client = None
        sheet = None

# ----------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets -----------------
def load_keys():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–ª—é—á–µ–π (key, expiry_date, user, plan). –ï—Å–ª–∏ –Ω–µ—Ç sheet ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π df."""
    if sheet is None:
        return pd.DataFrame(columns=["key", "expiry_date", "user", "plan"])
    records = sheet.get_all_records()
    df = pd.DataFrame(records)
    if "expiry_date" in df.columns:
        df["expiry_date"] = pd.to_datetime(df["expiry_date"], errors="coerce")
    else:
        df["expiry_date"] = pd.NaT
    if "user" not in df.columns:
        df["user"] = ""
    if "plan" not in df.columns:
        df["plan"] = "Basic"
    return df

def add_key(new_key, expiry_date="", plan="Basic"):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –≤ —Ç–∞–±–ª–∏—Ü—É (key, expiry_date, user='', plan)."""
    if sheet is None:
        st.error("Google Sheets not configured.")
        return
    sheet.append_row([new_key, expiry_date, "", plan])
    st.success(f"‚úÖ Key {new_key} ({plan}) added!")

def delete_key(del_key):
    if sheet is None:
        st.error("Google Sheets not configured.")
        return
    records = sheet.get_all_records()
    for idx, row in enumerate(records, start=2):
        if row.get("key") == del_key:
            sheet.delete_rows(idx)
            st.success(f"‚úÖ Key {del_key} deleted!")
            return
    st.error("‚ö†Ô∏è Key not found")

def extend_key(ext_key, new_expiry):
    if sheet is None:
        st.error("Google Sheets not configured.")
        return
    records = sheet.get_all_records()
    for idx, row in enumerate(records, start=2):
        if row.get("key") == ext_key:
            sheet.update_cell(idx, 2, str(new_expiry))
            st.success(f"‚úÖ Key {ext_key} extended until {new_expiry}")
            return
    st.error("‚ö†Ô∏è Key not found")

def update_plan(key_val, new_plan):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ plan –¥–ª—è –∫–ª—é—á–∞."""
    if sheet is None:
        st.error("Google Sheets not configured.")
        return
    records = sheet.get_all_records()
    for idx, row in enumerate(records, start=2):
        if row.get("key") == key_val:
            # —Å—Ç–æ–ª–±–µ—Ü plan ‚Äî 4-—è –∫–æ–ª–æ–Ω–∫–∞ (key, expiry_date, user, plan)
            sheet.update_cell(idx, 4, new_plan)
            st.success(f"‚úÖ Key {key_val} plan set to {new_plan}")
            return
    st.error("‚ö†Ô∏è Key not found")

def unbind_user(key_val):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É user –¥–ª—è –∫–ª—é—á–∞."""
    if sheet is None:
        st.error("Google Sheets not configured.")
        return
    records = sheet.get_all_records()
    for idx, row in enumerate(records, start=2):
        if row.get("key") == key_val:
            sheet.update_cell(idx, 3, "")
            st.success(f"‚úÖ User unbound from {key_val}")
            return
    st.error("‚ö†Ô∏è Key not found")

def bind_user_to_key(user_key, email):
    """–ï—Å–ª–∏ –∫–ª—é—á —Å–≤–æ–±–æ–¥–µ–Ω ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å email."""
    if sheet is None:
        return
    records = sheet.get_all_records()
    for idx, r in enumerate(records, start=2):
        if r.get("key") == user_key:
            current_user = r.get("user", "")
            if not current_user and email:
                sheet.update_cell(idx, 3, email)
                st.info(f"üîó Key {user_key} linked to {email}")
            return

def ensure_logs_sheet():
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ª–∏—Å—Ç logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏."""
    if client is None or SHEET_ID is None:
        return None
    sh = client.open_by_key(SHEET_ID)
    try:
        log_sheet = sh.worksheet("logs")
    except gspread.exceptions.WorksheetNotFound:
        log_sheet = sh.add_worksheet(title="logs", rows="1000", cols="6")
        log_sheet.append_row(["timestamp", "key", "email", "role", "plan", "ip"])
    # –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ —Ç–µ ‚Äî –∏—Å–ø—Ä–∞–≤–∏–º
    headers = log_sheet.row_values(1)
    expected = ["timestamp", "key", "email", "role", "plan", "ip"]
    if headers != expected:
        log_sheet.clear()
        log_sheet.append_row(expected)
    return log_sheet

def get_user_ip():
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å IP —Å–µ—Ä–≤–µ—Ä–∞)."""
    try:
        return requests.get("https://api.ipify.org", timeout=3).text
    except Exception:
        return "unknown"

def log_access(user_key, email, role, plan="Basic"):
    """–õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥: timestamp, key, email, role, plan, ip + –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π."""
    if client is None or SHEET_ID is None:
        # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        return
    try:
        log_sheet = ensure_logs_sheet()
        if log_sheet is None:
            return
        logs = log_sheet.get_all_records()
        cutoff = datetime.now() - timedelta(days=30)
        new_rows = [log_sheet.row_values(1)]  # header
        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ
        for r in logs:
            ts_str = r.get("timestamp", "")
            try:
                ts = datetime.strptime(ts_str, "%Y-%m-%d %H:%M:%S")
                if ts >= cutoff:
                    new_rows.append([r.get(c) for c in ["timestamp", "key", "email", "role", "plan", "ip"]])
            except Exception:
                # –µ—Å–ª–∏ –ø–∞—Ä—Å–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º (–±–µ–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è—Ç—å)
                new_rows.append([r.get(c) for c in ["timestamp", "key", "email", "role", "plan", "ip"]])
        # –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ ‚Äî –æ–±–Ω–æ–≤–∏–º –ª–∏—Å—Ç (—É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ)
        if len(new_rows) != len(logs) + 1:
            log_sheet.clear()
            log_sheet.update(new_rows)
        # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ip = get_user_ip()
        log_sheet.append_row([timestamp, user_key, email, role, plan, ip])
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Logging error: {e}")

# ----------------- –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞ -----------------
def check_key_valid(user_key, email=""):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (valid:bool, role:str, plan:str, message:str)
    role: "admin" –∏–ª–∏ "user"
    plan: Basic/Pro/Trial (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî Basic)
    """
    # ADMIN_KEY –≤ st.secrets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    ADMIN_KEY = st.secrets.get("ADMIN_KEY") if "ADMIN_KEY" in st.secrets else None
    if ADMIN_KEY and user_key == ADMIN_KEY:
        return True, "admin", "Admin", TXT["admin_success"]

    df = load_keys()
    if df.empty:
        return False, "user", "Basic", TXT["auth_error"]

    row = df[df["key"] == user_key]
    if row.empty:
        return False, "user", "Basic", TXT["auth_error"]

    expiry = row.iloc[0].get("expiry_date", pd.NaT)
    user_val = str(row.iloc[0].get("user", "")).strip()
    plan = row.iloc[0].get("plan", "Basic") or "Basic"

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ expiry_date
    if pd.notna(expiry):
        try:
            if pd.Timestamp(expiry) < pd.Timestamp(datetime.now()):
                return False, "user", plan, TXT["auth_expired"]
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass

    # –∞–≤—Ç–æ-–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Trial: –æ–∂–∏–¥–∞–µ–º expiry_date (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∏–∞–ª–∞)
    if str(plan).lower() == "trial":
        if pd.isna(expiry):
            return False, "user", plan, "‚ö†Ô∏è Trial must have expiry_date"
        if pd.Timestamp(datetime.now()) > pd.Timestamp(expiry):
            return False, "user", plan, TXT["auth_trial_expired"]

    # –µ—Å–ª–∏ –∫–ª—é—á —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É email
    if user_val:
        if email and email.strip().lower() != user_val.lower():
            return False, "user", plan, f"‚ö†Ô∏è This key is already used by {user_val}"
        else:
            return True, "user", plan, TXT["auth_success"].format(plan=plan)
    else:
        # –µ—Å–ª–∏ –∫–ª—é—á —Å–≤–æ–±–æ–¥–µ–Ω –∏ –ø—Ä–∏—à—ë–ª email ‚Äî –ø—Ä–∏–≤—è–∂–µ–º
        if email:
            bind_user_to_key(user_key, email.strip())
        return True, "user", plan, TXT["auth_success"].format(plan=plan)

# ----------------- UI: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è -----------------
st.sidebar.title(TXT["auth_title"])
password = st.sidebar.text_input(TXT["auth_prompt"], type="password")
email = st.sidebar.text_input(TXT["email_prompt"])

valid, role, plan, message = check_key_valid(password.strip(), email.strip())

if not valid:
    st.error(message)
    st.stop()
else:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–¥–∏–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    st.success(message)
    # –õ–æ–≥–∏—Ä—É–µ–º (—Ç–∏—Ö–æ, –¥–∞–∂–µ –µ—Å–ª–∏ Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    log_access(password.strip(), email.strip(), role, plan)

# ----------------- Admin panel -----------------
if role == "admin":
    st.title(TXT["admin_title"])

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–ª—é—á–µ–π
    st.subheader(TXT["current_keys"])
    keys_df = load_keys()
    st.dataframe(keys_df)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    st.subheader(TXT["add_key"])
    new_key = st.text_input("Enter new key")
    expiry_date = st.date_input(TXT["expiry_optional"], value=None)
    plan_choice = st.selectbox("Select plan", ["Basic", "Pro", "Trial"])
    if st.button("Add Key"):
        add_key(new_key.strip(), str(expiry_date) if expiry_date else "", plan_choice)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    st.subheader(TXT["delete_key"])
    del_key = st.text_input(TXT["delete_prompt"])
    if st.button("Delete Key"):
        delete_key(del_key.strip())

    # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    st.subheader(TXT["extend_key"])
    ext_key = st.text_input(TXT["extend_prompt"])
    new_expiry = st.date_input(TXT["extend_date"], value=datetime.now())
    if st.button("Extend Key"):
        extend_key(ext_key.strip(), new_expiry)

    # –°–º–µ–Ω–∞ –ø–ª–∞–Ω–∞
    st.subheader(TXT["change_plan"])
    key_for_plan = st.text_input("Key to change plan")
    new_plan_val = st.selectbox("New plan", ["Basic", "Pro", "Trial"])
    if st.button("Update Plan"):
        update_plan(key_for_plan.strip(), new_plan_val)

    # –û—Ç–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.subheader(TXT["unbind_user"])
    key_unbind = st.text_input("Key to unbind user")
    if st.button("Unbind User"):
        unbind_user(key_unbind.strip())

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
    st.subheader(TXT["logs"])
    try:
        if client and SHEET_ID:
            log_sheet = ensure_logs_sheet()
            logs = log_sheet.get_all_records()
            logs_df = pd.DataFrame(logs)
            email_filter = st.text_input(TXT["filter_email"])
            if email_filter:
                logs_df = logs_df[logs_df["email"].str.contains(email_filter, case=False, na=False)]
            st.dataframe(logs_df)
            # –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏
            out = BytesIO()
            logs_df.to_excel(out, index=False, engine="openpyxl")
            st.download_button(TXT["download_logs"], out.getvalue(), file_name="login_logs.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        else:
            st.info("‚ÑπÔ∏è Logs are disabled (Google Sheets not configured).")
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Cannot load logs: {e}")

# ----------------- Main application (user / admin) -----------------
if role in ["user", "admin"]:
    st.title(TXT["title"])

    uploaded_file = st.file_uploader(TXT["upload"], type=["csv"])
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.subheader(TXT["data_preview"])
        st.dataframe(df.head())

        required = {"city", "sqft", "rooms", "bathrooms", "price"}
        if not required.issubset(df.columns):
            st.error(TXT["csv_error"])
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º X –∏ y (–º–æ–¥–µ–ª—å —É—á–∏—Ç—Å—è –Ω–∞ sqft, rooms, bathrooms)
            X = df[["sqft", "rooms", "bathrooms"]].astype(float)
            y = df["price"].astype(float)

            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ –ø–ª–∞–Ω—É
            model = None
            if str(plan).lower() != "pro":
                st.info("üîë Your plan: Basic/Trial ‚Äî using Linear Regression.")
                model = LinearRegression()
                model.fit(X, y)
            else:
                st.success("üöÄ Your plan: Pro ‚Äî choose model.")
                options = ["Linear Regression", "Random Forest"]
                if XGBOOST_AVAILABLE:
                    options.append("XGBoost")
                model_choice = st.selectbox("Select model:", options)
                if model_choice == "Linear Regression":
                    model = LinearRegression()
                elif model_choice == "Random Forest":
                    model = RandomForestRegressor(n_estimators=100, random_state=42)
                elif model_choice == "XGBoost":
                    if XGBOOST_AVAILABLE:
                        model = xgb.XGBRegressor(n_estimators=100, random_state=42)
                    else:
                        st.warning("XGBoost not installed ‚Äî fallback to RandomForest.")
                        model = RandomForestRegressor(n_estimators=100, random_state=42)
                # –û–±—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                with st.spinner("üîß Training model..."):
                    model.fit(X, y)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            preds = model.predict(X)
            r2 = r2_score(y, preds)
            mae = mean_absolute_error(y, preds)
            st.write(f"**R¬≤:** {r2:.3f}    **MAE:** {mae:,.0f} ‚Ç¨")

            # –ì—Ä–∞—Ñ–∏–∫: scatter + –ª–∏–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ sqft (–ø—Ä–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö rooms=3, bathrooms=2)
            st.subheader(TXT["plot"])
            fig, ax = plt.subplots(figsize=(8, 5))
            for city in df["city"].unique():
                cd = df[df["city"] == city]
                ax.scatter(cd["sqft"], cd["price"], label=city, alpha=0.7)

            # –î–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–µ–π –¥–ª—è –ª–∏–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
            min_sqft = int(df["sqft"].min())
            max_sqft = int(df["sqft"].max())
            sqft_vals = np.linspace(min_sqft, max_sqft, 200)
            sqft_df = pd.DataFrame({
                "sqft": sqft_vals,
                "rooms": np.full_like(sqft_vals, 3),
                "bathrooms": np.full_like(sqft_vals, 2)
            })
            # predict –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2D array / DataFrame
            pred_line = model.predict(sqft_df)
            ax.plot(sqft_vals, pred_line, color="red", linewidth=2, label="Prediction")
            ax.set_xlabel(TXT["xlabel"])
            ax.set_ylabel(TXT["ylabel"])
            ax.legend()
            st.pyplot(fig)

            # –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ PNG
            png_buffer = BytesIO()
            fig.savefig(png_buffer, format="png", bbox_inches="tight")
            png_buffer.seek(0)
            st.download_button(TXT["download_png"], data=png_buffer.getvalue(),
                               file_name="price_vs_sqft.png", mime="image/png")

            # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∏
            st.subheader("üîÆ Predict New Property")
            sqft_input = st.number_input(TXT["prediction_input"], min_value=1, max_value=10000, value=int(np.median(df["sqft"])), step=1)
            rooms_input = st.number_input("Rooms", min_value=1, max_value=10, value=3, step=1)
            baths_input = st.number_input("Bathrooms", min_value=1, max_value=5, value=2, step=1)
            if st.button("Predict Price"):
                new_X = np.array([[sqft_input, rooms_input, baths_input]])
                pred_price = model.predict(new_X)[0]
                st.success(TXT["prediction_result"].format(price=int(pred_price)))

            # –≠–∫—Å–ø–æ—Ä—Ç Excel —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
            df_export = df.copy()
            df_export["predicted_price"] = preds.astype(int)
            out = BytesIO()
            df_export.to_excel(out, index=False, engine="openpyxl")
            st.download_button(TXT["download"], out.getvalue(), file_name="predictions.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

